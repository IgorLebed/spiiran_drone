;; Auto-generated. Do not edit!


(when (boundp 'navigation_util::NavigationPosGoal)
  (if (not (find-package "NAVIGATION_UTIL"))
    (make-package "NAVIGATION_UTIL"))
  (shadow 'NavigationPosGoal (find-package "NAVIGATION_UTIL")))
(unless (find-package "NAVIGATION_UTIL::NAVIGATIONPOSGOAL")
  (make-package "NAVIGATION_UTIL::NAVIGATIONPOSGOAL"))

(in-package "ROS")
;;//! \htmlinclude NavigationPosGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass navigation_util::NavigationPosGoal
  :super ros::object
  :slots (_pose _tolerance _xy_valid ))

(defmethod navigation_util::NavigationPosGoal
  (:init
   (&key
    ((:pose __pose) (instance geometry_msgs::PoseStamped :init))
    ((:tolerance __tolerance) 0.0)
    ((:xy_valid __xy_valid) nil)
    )
   (send-super :init)
   (setq _pose __pose)
   (setq _tolerance (float __tolerance))
   (setq _xy_valid __xy_valid)
   self)
  (:pose
   (&rest __pose)
   (if (keywordp (car __pose))
       (send* _pose __pose)
     (progn
       (if __pose (setq _pose (car __pose)))
       _pose)))
  (:tolerance
   (&optional __tolerance)
   (if __tolerance (setq _tolerance __tolerance)) _tolerance)
  (:xy_valid
   (&optional __xy_valid)
   (if __xy_valid (setq _xy_valid __xy_valid)) _xy_valid)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseStamped _pose
    (send _pose :serialization-length)
    ;; float32 _tolerance
    4
    ;; bool _xy_valid
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseStamped _pose
       (send _pose :serialize s)
     ;; float32 _tolerance
       (sys::poke _tolerance (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; bool _xy_valid
       (if _xy_valid (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseStamped _pose
     (send _pose :deserialize buf ptr-) (incf ptr- (send _pose :serialization-length))
   ;; float32 _tolerance
     (setq _tolerance (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; bool _xy_valid
     (setq _xy_valid (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get navigation_util::NavigationPosGoal :md5sum-) "040239196a5b3aef24d736ced5506739")
(setf (get navigation_util::NavigationPosGoal :datatype-) "navigation_util/NavigationPosGoal")
(setf (get navigation_util::NavigationPosGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

geometry_msgs/PoseStamped pose

#Termination criterion, in terms of sum of squared error per dimension
float32 tolerance
bool xy_valid


================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :navigation_util/NavigationPosGoal "040239196a5b3aef24d736ced5506739")


