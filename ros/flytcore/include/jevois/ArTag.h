// Generated by gencpp from file jevois/ArTag.msg
// DO NOT EDIT!


#ifndef JEVOIS_MESSAGE_ARTAG_H
#define JEVOIS_MESSAGE_ARTAG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>

namespace jevois
{
template <class ContainerAllocator>
struct ArTag_
{
  typedef ArTag_<ContainerAllocator> Type;

  ArTag_()
    : header()
    , marker_id(0)
    , serstyle()
    , tagtype()
    , quat()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , rot_x(0.0)
    , rot_y(0.0)
    , rot_z(0.0)
    , confidence(0.0)  {
    }
  ArTag_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , marker_id(0)
    , serstyle(_alloc)
    , tagtype(_alloc)
    , quat(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , rot_x(0.0)
    , rot_y(0.0)
    , rot_z(0.0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _marker_id_type;
  _marker_id_type marker_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _serstyle_type;
  _serstyle_type serstyle;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tagtype_type;
  _tagtype_type tagtype;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _quat_type;
  _quat_type quat;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _rot_x_type;
  _rot_x_type rot_x;

   typedef float _rot_y_type;
  _rot_y_type rot_y;

   typedef float _rot_z_type;
  _rot_z_type rot_z;

   typedef float _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::jevois::ArTag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jevois::ArTag_<ContainerAllocator> const> ConstPtr;

}; // struct ArTag_

typedef ::jevois::ArTag_<std::allocator<void> > ArTag;

typedef boost::shared_ptr< ::jevois::ArTag > ArTagPtr;
typedef boost::shared_ptr< ::jevois::ArTag const> ArTagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jevois::ArTag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jevois::ArTag_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jevois

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'jevois': ['/home/flytpod/flytos/src/flytOS/flyt_packages/jevois/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jevois::ArTag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jevois::ArTag_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jevois::ArTag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jevois::ArTag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jevois::ArTag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jevois::ArTag_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jevois::ArTag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0ff331e9902aaedf65e8c451a744d9f";
  }

  static const char* value(const ::jevois::ArTag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0ff331e9902aaedULL;
  static const uint64_t static_value2 = 0xf65e8c451a744d9fULL;
};

template<class ContainerAllocator>
struct DataType< ::jevois::ArTag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jevois/ArTag";
  }

  static const char* value(const ::jevois::ArTag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jevois::ArTag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Stores ARTag data\n\
\n\
Header header\n\
int16 marker_id\n\
string serstyle\n\
string tagtype\n\
geometry_msgs/Quaternion quat\n\
float32 x\n\
float32 y\n\
float32 z\n\
float32 rot_x\n\
float32 rot_y\n\
float32 rot_z\n\
float32 confidence\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::jevois::ArTag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jevois::ArTag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.marker_id);
      stream.next(m.serstyle);
      stream.next(m.tagtype);
      stream.next(m.quat);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.rot_x);
      stream.next(m.rot_y);
      stream.next(m.rot_z);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArTag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jevois::ArTag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jevois::ArTag_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "marker_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.marker_id);
    s << indent << "serstyle: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.serstyle);
    s << indent << "tagtype: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tagtype);
    s << indent << "quat: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quat);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "rot_x: ";
    Printer<float>::stream(s, indent + "  ", v.rot_x);
    s << indent << "rot_y: ";
    Printer<float>::stream(s, indent + "  ", v.rot_y);
    s << indent << "rot_z: ";
    Printer<float>::stream(s, indent + "  ", v.rot_z);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JEVOIS_MESSAGE_ARTAG_H
