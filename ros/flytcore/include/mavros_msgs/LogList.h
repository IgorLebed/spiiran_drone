// Generated by gencpp from file mavros_msgs/LogList.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_LOGLIST_H
#define MAVROS_MSGS_MESSAGE_LOGLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct LogList_
{
  typedef LogList_<ContainerAllocator> Type;

  LogList_()
    : id(0)
    , filename()
    , autopilot()
    , date()
    , time(0)
    , size(0)
    , sbc_status(0)  {
    }
  LogList_(const ContainerAllocator& _alloc)
    : id(0)
    , filename(_alloc)
    , autopilot(_alloc)
    , date(_alloc)
    , time(0)
    , size(0)
    , sbc_status(0)  {
  (void)_alloc;
    }



   typedef uint16_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  _filename_type filename;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _autopilot_type;
  _autopilot_type autopilot;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _date_type;
  _date_type date;

   typedef uint32_t _time_type;
  _time_type time;

   typedef uint32_t _size_type;
  _size_type size;

   typedef uint8_t _sbc_status_type;
  _sbc_status_type sbc_status;





  typedef boost::shared_ptr< ::mavros_msgs::LogList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::LogList_<ContainerAllocator> const> ConstPtr;

}; // struct LogList_

typedef ::mavros_msgs::LogList_<std::allocator<void> > LogList;

typedef boost::shared_ptr< ::mavros_msgs::LogList > LogListPtr;
typedef boost::shared_ptr< ::mavros_msgs::LogList const> LogListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::LogList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::LogList_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mavros_msgs': ['/home/flytpod/flytos/src/flytOS/flyt_core/core_nodes/mavros/mavros_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::LogList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::LogList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::LogList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::LogList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::LogList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::LogList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::LogList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a31e4c42d97337d2378f367a9d40f318";
  }

  static const char* value(const ::mavros_msgs::LogList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa31e4c42d97337d2ULL;
  static const uint64_t static_value2 = 0x378f367a9d40f318ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::LogList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/LogList";
  }

  static const char* value(const ::mavros_msgs::LogList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::LogList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Base message format for every entry of log list\n\
# sbc_status -> 0 for not available on SBC, 1 for available\n\
\n\
uint16 id\n\
string filename\n\
string autopilot\n\
string date\n\
uint32 time\n\
uint32 size\n\
uint8 sbc_status\n\
";
  }

  static const char* value(const ::mavros_msgs::LogList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::LogList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.filename);
      stream.next(m.autopilot);
      stream.next(m.date);
      stream.next(m.time);
      stream.next(m.size);
      stream.next(m.sbc_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LogList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::LogList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::LogList_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filename);
    s << indent << "autopilot: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.autopilot);
    s << indent << "date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.date);
    s << indent << "time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time);
    s << indent << "size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.size);
    s << indent << "sbc_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sbc_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_LOGLIST_H
