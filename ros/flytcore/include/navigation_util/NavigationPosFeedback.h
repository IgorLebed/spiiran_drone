// Generated by gencpp from file navigation_util/NavigationPosFeedback.msg
// DO NOT EDIT!


#ifndef NAVIGATION_UTIL_MESSAGE_NAVIGATIONPOSFEEDBACK_H
#define NAVIGATION_UTIL_MESSAGE_NAVIGATIONPOSFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace navigation_util
{
template <class ContainerAllocator>
struct NavigationPosFeedback_
{
  typedef NavigationPosFeedback_<ContainerAllocator> Type;

  NavigationPosFeedback_()
    : position_error()
    , yaw_error(0.0)
    , sum_sq_error(0.0)  {
    }
  NavigationPosFeedback_(const ContainerAllocator& _alloc)
    : position_error(_alloc)
    , yaw_error(0.0)
    , sum_sq_error(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_error_type;
  _position_error_type position_error;

   typedef float _yaw_error_type;
  _yaw_error_type yaw_error;

   typedef float _sum_sq_error_type;
  _sum_sq_error_type sum_sq_error;





  typedef boost::shared_ptr< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationPosFeedback_

typedef ::navigation_util::NavigationPosFeedback_<std::allocator<void> > NavigationPosFeedback;

typedef boost::shared_ptr< ::navigation_util::NavigationPosFeedback > NavigationPosFeedbackPtr;
typedef boost::shared_ptr< ::navigation_util::NavigationPosFeedback const> NavigationPosFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation_util::NavigationPosFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace navigation_util

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'navigation_util': ['/home/flytpod/flytos/amd64-devel/share/navigation_util/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73c4f1364353f8d8f4de503f3aaa2904";
  }

  static const char* value(const ::navigation_util::NavigationPosFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73c4f1364353f8d8ULL;
  static const uint64_t static_value2 = 0xf4de503f3aaa2904ULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation_util/NavigationPosFeedback";
  }

  static const char* value(const ::navigation_util::NavigationPosFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
geometry_msgs/Point position_error\n\
float32 yaw_error\n\
#This corresponds to the termination criterion, tolerance\n\
float32 sum_sq_error\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::navigation_util::NavigationPosFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_error);
      stream.next(m.yaw_error);
      stream.next(m.sum_sq_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationPosFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation_util::NavigationPosFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation_util::NavigationPosFeedback_<ContainerAllocator>& v)
  {
    s << indent << "position_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position_error);
    s << indent << "yaw_error: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_error);
    s << indent << "sum_sq_error: ";
    Printer<float>::stream(s, indent + "  ", v.sum_sq_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION_UTIL_MESSAGE_NAVIGATIONPOSFEEDBACK_H
