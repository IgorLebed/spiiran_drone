// Generated by gencpp from file vision_apps/SetCheckpointsRequest.msg
// DO NOT EDIT!


#ifndef VISION_APPS_MESSAGE_SETCHECKPOINTSREQUEST_H
#define VISION_APPS_MESSAGE_SETCHECKPOINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vision_apps/Checkpoint.h>

namespace vision_apps
{
template <class ContainerAllocator>
struct SetCheckpointsRequest_
{
  typedef SetCheckpointsRequest_<ContainerAllocator> Type;

  SetCheckpointsRequest_()
    : checkpoint_list()
    , save(false)  {
    }
  SetCheckpointsRequest_(const ContainerAllocator& _alloc)
    : checkpoint_list(_alloc)
    , save(false)  {
  (void)_alloc;
    }



   typedef std::vector< ::vision_apps::Checkpoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::vision_apps::Checkpoint_<ContainerAllocator> >::other >  _checkpoint_list_type;
  _checkpoint_list_type checkpoint_list;

   typedef uint8_t _save_type;
  _save_type save;





  typedef boost::shared_ptr< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetCheckpointsRequest_

typedef ::vision_apps::SetCheckpointsRequest_<std::allocator<void> > SetCheckpointsRequest;

typedef boost::shared_ptr< ::vision_apps::SetCheckpointsRequest > SetCheckpointsRequestPtr;
typedef boost::shared_ptr< ::vision_apps::SetCheckpointsRequest const> SetCheckpointsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision_apps

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'vision_apps': ['/home/flytpod/flytos/src/flytOS/flyt_packages/vision/vision_nodes/msg', '/home/flytpod/flytos/amd64-devel/share/vision_apps/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a2f89c19abc4d2f9bba48a64be1b3808";
  }

  static const char* value(const ::vision_apps::SetCheckpointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa2f89c19abc4d2f9ULL;
  static const uint64_t static_value2 = 0xbba48a64be1b3808ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_apps/SetCheckpointsRequest";
  }

  static const char* value(const ::vision_apps::SetCheckpointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_apps/Checkpoint[] checkpoint_list\n\
bool save\n\
\n\
================================================================================\n\
MSG: vision_apps/Checkpoint\n\
uint8 checkpoint_id\n\
uint8 tag_id\n\
float32 tag_x\n\
float32 tag_y\n\
float32 tag_z\n\
float32 tag_yaw\n\
float32 tag_size\n\
";
  }

  static const char* value(const ::vision_apps::SetCheckpointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.checkpoint_list);
      stream.next(m.save);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetCheckpointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_apps::SetCheckpointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_apps::SetCheckpointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "checkpoint_list[]" << std::endl;
    for (size_t i = 0; i < v.checkpoint_list.size(); ++i)
    {
      s << indent << "  checkpoint_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vision_apps::Checkpoint_<ContainerAllocator> >::stream(s, indent + "    ", v.checkpoint_list[i]);
    }
    s << indent << "save: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.save);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_APPS_MESSAGE_SETCHECKPOINTSREQUEST_H
