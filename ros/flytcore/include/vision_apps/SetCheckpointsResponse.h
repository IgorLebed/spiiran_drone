// Generated by gencpp from file vision_apps/SetCheckpointsResponse.msg
// DO NOT EDIT!


#ifndef VISION_APPS_MESSAGE_SETCHECKPOINTSRESPONSE_H
#define VISION_APPS_MESSAGE_SETCHECKPOINTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision_apps
{
template <class ContainerAllocator>
struct SetCheckpointsResponse_
{
  typedef SetCheckpointsResponse_<ContainerAllocator> Type;

  SetCheckpointsResponse_()
    : success(false)
    , error_code(0)
    , message()
    , no_of_checkpoints(0)  {
    }
  SetCheckpointsResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , error_code(0)
    , message(_alloc)
    , no_of_checkpoints(0)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef uint8_t _error_code_type;
  _error_code_type error_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef uint8_t _no_of_checkpoints_type;
  _no_of_checkpoints_type no_of_checkpoints;





  typedef boost::shared_ptr< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SetCheckpointsResponse_

typedef ::vision_apps::SetCheckpointsResponse_<std::allocator<void> > SetCheckpointsResponse;

typedef boost::shared_ptr< ::vision_apps::SetCheckpointsResponse > SetCheckpointsResponsePtr;
typedef boost::shared_ptr< ::vision_apps::SetCheckpointsResponse const> SetCheckpointsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision_apps

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'vision_apps': ['/home/flytpod/flytos/src/flytOS/flyt_packages/vision/vision_nodes/msg', '/home/flytpod/flytos/amd64-devel/share/vision_apps/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "711cb5d50a8f528862a3b1e99d5fe29d";
  }

  static const char* value(const ::vision_apps::SetCheckpointsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x711cb5d50a8f5288ULL;
  static const uint64_t static_value2 = 0x62a3b1e99d5fe29dULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_apps/SetCheckpointsResponse";
  }

  static const char* value(const ::vision_apps::SetCheckpointsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n\
uint8 error_code\n\
string message\n\
uint8 no_of_checkpoints\n\
";
  }

  static const char* value(const ::vision_apps::SetCheckpointsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.error_code);
      stream.next(m.message);
      stream.next(m.no_of_checkpoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetCheckpointsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_apps::SetCheckpointsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_apps::SetCheckpointsResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "no_of_checkpoints: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.no_of_checkpoints);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_APPS_MESSAGE_SETCHECKPOINTSRESPONSE_H
