// Generated by gencpp from file vision_apps/Checkpoint.msg
// DO NOT EDIT!


#ifndef VISION_APPS_MESSAGE_CHECKPOINT_H
#define VISION_APPS_MESSAGE_CHECKPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision_apps
{
template <class ContainerAllocator>
struct Checkpoint_
{
  typedef Checkpoint_<ContainerAllocator> Type;

  Checkpoint_()
    : checkpoint_id(0)
    , tag_id(0)
    , tag_x(0.0)
    , tag_y(0.0)
    , tag_z(0.0)
    , tag_yaw(0.0)
    , tag_size(0.0)  {
    }
  Checkpoint_(const ContainerAllocator& _alloc)
    : checkpoint_id(0)
    , tag_id(0)
    , tag_x(0.0)
    , tag_y(0.0)
    , tag_z(0.0)
    , tag_yaw(0.0)
    , tag_size(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _checkpoint_id_type;
  _checkpoint_id_type checkpoint_id;

   typedef uint8_t _tag_id_type;
  _tag_id_type tag_id;

   typedef float _tag_x_type;
  _tag_x_type tag_x;

   typedef float _tag_y_type;
  _tag_y_type tag_y;

   typedef float _tag_z_type;
  _tag_z_type tag_z;

   typedef float _tag_yaw_type;
  _tag_yaw_type tag_yaw;

   typedef float _tag_size_type;
  _tag_size_type tag_size;





  typedef boost::shared_ptr< ::vision_apps::Checkpoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_apps::Checkpoint_<ContainerAllocator> const> ConstPtr;

}; // struct Checkpoint_

typedef ::vision_apps::Checkpoint_<std::allocator<void> > Checkpoint;

typedef boost::shared_ptr< ::vision_apps::Checkpoint > CheckpointPtr;
typedef boost::shared_ptr< ::vision_apps::Checkpoint const> CheckpointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_apps::Checkpoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_apps::Checkpoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision_apps

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'vision_apps': ['/home/flytpod/flytos/src/flytOS/flyt_packages/vision/vision_nodes/msg', '/home/flytpod/flytos/amd64-devel/share/vision_apps/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision_apps::Checkpoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_apps::Checkpoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_apps::Checkpoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_apps::Checkpoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_apps::Checkpoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_apps::Checkpoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_apps::Checkpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2a1ecea1fa4e57d3d72769bae7bcf7a";
  }

  static const char* value(const ::vision_apps::Checkpoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2a1ecea1fa4e57dULL;
  static const uint64_t static_value2 = 0x3d72769bae7bcf7aULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_apps::Checkpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_apps/Checkpoint";
  }

  static const char* value(const ::vision_apps::Checkpoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_apps::Checkpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 checkpoint_id\n\
uint8 tag_id\n\
float32 tag_x\n\
float32 tag_y\n\
float32 tag_z\n\
float32 tag_yaw\n\
float32 tag_size\n\
";
  }

  static const char* value(const ::vision_apps::Checkpoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_apps::Checkpoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.checkpoint_id);
      stream.next(m.tag_id);
      stream.next(m.tag_x);
      stream.next(m.tag_y);
      stream.next(m.tag_z);
      stream.next(m.tag_yaw);
      stream.next(m.tag_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Checkpoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_apps::Checkpoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_apps::Checkpoint_<ContainerAllocator>& v)
  {
    s << indent << "checkpoint_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checkpoint_id);
    s << indent << "tag_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tag_id);
    s << indent << "tag_x: ";
    Printer<float>::stream(s, indent + "  ", v.tag_x);
    s << indent << "tag_y: ";
    Printer<float>::stream(s, indent + "  ", v.tag_y);
    s << indent << "tag_z: ";
    Printer<float>::stream(s, indent + "  ", v.tag_z);
    s << indent << "tag_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.tag_yaw);
    s << indent << "tag_size: ";
    Printer<float>::stream(s, indent + "  ", v.tag_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_APPS_MESSAGE_CHECKPOINT_H
