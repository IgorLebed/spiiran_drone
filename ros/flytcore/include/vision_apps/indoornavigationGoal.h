// Generated by gencpp from file vision_apps/indoornavigationGoal.msg
// DO NOT EDIT!


#ifndef VISION_APPS_MESSAGE_INDOORNAVIGATIONGOAL_H
#define VISION_APPS_MESSAGE_INDOORNAVIGATIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision_apps
{
template <class ContainerAllocator>
struct indoornavigationGoal_
{
  typedef indoornavigationGoal_<ContainerAllocator> Type;

  indoornavigationGoal_()
    : mission_list()
    , from_origin(false)  {
    }
  indoornavigationGoal_(const ContainerAllocator& _alloc)
    : mission_list(_alloc)
    , from_origin(false)  {
  (void)_alloc;
    }



   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _mission_list_type;
  _mission_list_type mission_list;

   typedef uint8_t _from_origin_type;
  _from_origin_type from_origin;





  typedef boost::shared_ptr< ::vision_apps::indoornavigationGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_apps::indoornavigationGoal_<ContainerAllocator> const> ConstPtr;

}; // struct indoornavigationGoal_

typedef ::vision_apps::indoornavigationGoal_<std::allocator<void> > indoornavigationGoal;

typedef boost::shared_ptr< ::vision_apps::indoornavigationGoal > indoornavigationGoalPtr;
typedef boost::shared_ptr< ::vision_apps::indoornavigationGoal const> indoornavigationGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_apps::indoornavigationGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_apps::indoornavigationGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision_apps

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'vision_apps': ['/home/flytpod/flytos/src/flytOS/flyt_packages/vision/vision_nodes/msg', '/home/flytpod/flytos/amd64-devel/share/vision_apps/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision_apps::indoornavigationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_apps::indoornavigationGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_apps::indoornavigationGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_apps::indoornavigationGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_apps::indoornavigationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_apps::indoornavigationGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_apps::indoornavigationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e026cbae442f208eb8f15b42300d26b";
  }

  static const char* value(const ::vision_apps::indoornavigationGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e026cbae442f208ULL;
  static const uint64_t static_value2 = 0xeb8f15b42300d26bULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_apps::indoornavigationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_apps/indoornavigationGoal";
  }

  static const char* value(const ::vision_apps::indoornavigationGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_apps::indoornavigationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
int16[] mission_list\n\
bool from_origin\n\
";
  }

  static const char* value(const ::vision_apps::indoornavigationGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_apps::indoornavigationGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission_list);
      stream.next(m.from_origin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct indoornavigationGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_apps::indoornavigationGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_apps::indoornavigationGoal_<ContainerAllocator>& v)
  {
    s << indent << "mission_list[]" << std::endl;
    for (size_t i = 0; i < v.mission_list.size(); ++i)
    {
      s << indent << "  mission_list[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.mission_list[i]);
    }
    s << indent << "from_origin: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.from_origin);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_APPS_MESSAGE_INDOORNAVIGATIONGOAL_H
