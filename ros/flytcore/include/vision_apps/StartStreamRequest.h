// Generated by gencpp from file vision_apps/StartStreamRequest.msg
// DO NOT EDIT!


#ifndef VISION_APPS_MESSAGE_STARTSTREAMREQUEST_H
#define VISION_APPS_MESSAGE_STARTSTREAMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision_apps
{
template <class ContainerAllocator>
struct StartStreamRequest_
{
  typedef StartStreamRequest_<ContainerAllocator> Type;

  StartStreamRequest_()
    : streamer()
    , ip()
    , port()
    , source_type()
    , camera_alias()
    , topic()
    , camera_calib_file()
    , image_width(0)
    , image_height(0)
    , framerate(0)
    , brightness(0)  {
    }
  StartStreamRequest_(const ContainerAllocator& _alloc)
    : streamer(_alloc)
    , ip(_alloc)
    , port(_alloc)
    , source_type(_alloc)
    , camera_alias(_alloc)
    , topic(_alloc)
    , camera_calib_file(_alloc)
    , image_width(0)
    , image_height(0)
    , framerate(0)
    , brightness(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _streamer_type;
  _streamer_type streamer;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  _ip_type ip;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _port_type;
  _port_type port;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_type_type;
  _source_type_type source_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _camera_alias_type;
  _camera_alias_type camera_alias;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_type;
  _topic_type topic;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _camera_calib_file_type;
  _camera_calib_file_type camera_calib_file;

   typedef int64_t _image_width_type;
  _image_width_type image_width;

   typedef int64_t _image_height_type;
  _image_height_type image_height;

   typedef int64_t _framerate_type;
  _framerate_type framerate;

   typedef int64_t _brightness_type;
  _brightness_type brightness;





  typedef boost::shared_ptr< ::vision_apps::StartStreamRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_apps::StartStreamRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StartStreamRequest_

typedef ::vision_apps::StartStreamRequest_<std::allocator<void> > StartStreamRequest;

typedef boost::shared_ptr< ::vision_apps::StartStreamRequest > StartStreamRequestPtr;
typedef boost::shared_ptr< ::vision_apps::StartStreamRequest const> StartStreamRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_apps::StartStreamRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_apps::StartStreamRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision_apps

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'vision_apps': ['/home/flytpod/flytos/src/flytOS/flyt_packages/vision/vision_nodes/msg', '/home/flytpod/flytos/amd64-devel/share/vision_apps/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision_apps::StartStreamRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_apps::StartStreamRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_apps::StartStreamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_apps::StartStreamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_apps::StartStreamRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_apps::StartStreamRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_apps::StartStreamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd428f21e61f04708b49bf739aba95e4";
  }

  static const char* value(const ::vision_apps::StartStreamRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd428f21e61f0470ULL;
  static const uint64_t static_value2 = 0x8b49bf739aba95e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_apps::StartStreamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_apps/StartStreamRequest";
  }

  static const char* value(const ::vision_apps::StartStreamRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_apps::StartStreamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string streamer\n\
string ip\n\
string port\n\
string source_type\n\
string camera_alias\n\
string topic\n\
string camera_calib_file\n\
int64  image_width\n\
int64  image_height\n\
int64  framerate\n\
int64  brightness\n\
";
  }

  static const char* value(const ::vision_apps::StartStreamRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_apps::StartStreamRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.streamer);
      stream.next(m.ip);
      stream.next(m.port);
      stream.next(m.source_type);
      stream.next(m.camera_alias);
      stream.next(m.topic);
      stream.next(m.camera_calib_file);
      stream.next(m.image_width);
      stream.next(m.image_height);
      stream.next(m.framerate);
      stream.next(m.brightness);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartStreamRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_apps::StartStreamRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_apps::StartStreamRequest_<ContainerAllocator>& v)
  {
    s << indent << "streamer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.streamer);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "port: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.port);
    s << indent << "source_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source_type);
    s << indent << "camera_alias: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.camera_alias);
    s << indent << "topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic);
    s << indent << "camera_calib_file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.camera_calib_file);
    s << indent << "image_width: ";
    Printer<int64_t>::stream(s, indent + "  ", v.image_width);
    s << indent << "image_height: ";
    Printer<int64_t>::stream(s, indent + "  ", v.image_height);
    s << indent << "framerate: ";
    Printer<int64_t>::stream(s, indent + "  ", v.framerate);
    s << indent << "brightness: ";
    Printer<int64_t>::stream(s, indent + "  ", v.brightness);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_APPS_MESSAGE_STARTSTREAMREQUEST_H
