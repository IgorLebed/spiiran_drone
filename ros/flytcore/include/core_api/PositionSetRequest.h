// Generated by gencpp from file core_api/PositionSetRequest.msg
// DO NOT EDIT!


#ifndef CORE_API_MESSAGE_POSITIONSETREQUEST_H
#define CORE_API_MESSAGE_POSITIONSETREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/TwistStamped.h>

namespace core_api
{
template <class ContainerAllocator>
struct PositionSetRequest_
{
  typedef PositionSetRequest_<ContainerAllocator> Type;

  PositionSetRequest_()
    : twist()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , yaw(0.0)
    , tolerance(0.0)
    , async(false)
    , relative(false)
    , yaw_valid(false)
    , body_frame(false)  {
    }
  PositionSetRequest_(const ContainerAllocator& _alloc)
    : twist(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , yaw(0.0)
    , tolerance(0.0)
    , async(false)
    , relative(false)
    , yaw_valid(false)
    , body_frame(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::TwistStamped_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _tolerance_type;
  _tolerance_type tolerance;

   typedef uint8_t _async_type;
  _async_type async;

   typedef uint8_t _relative_type;
  _relative_type relative;

   typedef uint8_t _yaw_valid_type;
  _yaw_valid_type yaw_valid;

   typedef uint8_t _body_frame_type;
  _body_frame_type body_frame;





  typedef boost::shared_ptr< ::core_api::PositionSetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_api::PositionSetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PositionSetRequest_

typedef ::core_api::PositionSetRequest_<std::allocator<void> > PositionSetRequest;

typedef boost::shared_ptr< ::core_api::PositionSetRequest > PositionSetRequestPtr;
typedef boost::shared_ptr< ::core_api::PositionSetRequest const> PositionSetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::core_api::PositionSetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::core_api::PositionSetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace core_api

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'core_api': ['/home/flytpod/flytos/src/flytOS/flyt_core/core_api/core_api/msg/param', '/home/flytpod/flytos/src/flytOS/flyt_core/core_api/core_api/msg/param'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'diagnostic_msgs': ['/opt/ros/kinetic/share/diagnostic_msgs/cmake/../msg'], 'mavros_msgs': ['/home/flytpod/flytos/src/flytOS/flyt_core/core_nodes/mavros/mavros_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::core_api::PositionSetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::core_api::PositionSetRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core_api::PositionSetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core_api::PositionSetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core_api::PositionSetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core_api::PositionSetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::core_api::PositionSetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "318cdf87c4fc338ed0985477ad2c4898";
  }

  static const char* value(const ::core_api::PositionSetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x318cdf87c4fc338eULL;
  static const uint64_t static_value2 = 0xd0985477ad2c4898ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_api::PositionSetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "core_api/PositionSetRequest";
  }

  static const char* value(const ::core_api::PositionSetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::core_api::PositionSetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
\n\
\n\
geometry_msgs/TwistStamped twist\n\
float32 x\n\
float32 y\n\
float32 z\n\
float32 yaw\n\
float32 tolerance\n\
bool async\n\
bool relative\n\
bool yaw_valid\n\
bool body_frame\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistStamped\n\
# A twist with reference coordinate frame and timestamp\n\
Header header\n\
Twist twist\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::core_api::PositionSetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::core_api::PositionSetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.twist);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.yaw);
      stream.next(m.tolerance);
      stream.next(m.async);
      stream.next(m.relative);
      stream.next(m.yaw_valid);
      stream.next(m.body_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionSetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_api::PositionSetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::core_api::PositionSetRequest_<ContainerAllocator>& v)
  {
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::TwistStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "tolerance: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance);
    s << indent << "async: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.async);
    s << indent << "relative: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relative);
    s << indent << "yaw_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yaw_valid);
    s << indent << "body_frame: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.body_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CORE_API_MESSAGE_POSITIONSETREQUEST_H
