// Generated by gencpp from file core_api/GeofenceSetRequest.msg
// DO NOT EDIT!


#ifndef CORE_API_MESSAGE_GEOFENCESETREQUEST_H
#define CORE_API_MESSAGE_GEOFENCESETREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace core_api
{
template <class ContainerAllocator>
struct GeofenceSetRequest_
{
  typedef GeofenceSetRequest_<ContainerAllocator> Type;

  GeofenceSetRequest_()
    : min_alt(0.0)
    , max_alt(0.0)
    , lat()
    , lng()  {
    }
  GeofenceSetRequest_(const ContainerAllocator& _alloc)
    : min_alt(0.0)
    , max_alt(0.0)
    , lat(_alloc)
    , lng(_alloc)  {
  (void)_alloc;
    }



   typedef double _min_alt_type;
  _min_alt_type min_alt;

   typedef double _max_alt_type;
  _max_alt_type max_alt;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _lat_type;
  _lat_type lat;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _lng_type;
  _lng_type lng;





  typedef boost::shared_ptr< ::core_api::GeofenceSetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_api::GeofenceSetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GeofenceSetRequest_

typedef ::core_api::GeofenceSetRequest_<std::allocator<void> > GeofenceSetRequest;

typedef boost::shared_ptr< ::core_api::GeofenceSetRequest > GeofenceSetRequestPtr;
typedef boost::shared_ptr< ::core_api::GeofenceSetRequest const> GeofenceSetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::core_api::GeofenceSetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::core_api::GeofenceSetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace core_api

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'core_api': ['/home/flytpod/flytos/src/flytOS/flyt_core/core_api/core_api/msg/param', '/home/flytpod/flytos/src/flytOS/flyt_core/core_api/core_api/msg/param'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'diagnostic_msgs': ['/opt/ros/kinetic/share/diagnostic_msgs/cmake/../msg'], 'mavros_msgs': ['/home/flytpod/flytos/src/flytOS/flyt_core/core_nodes/mavros/mavros_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::core_api::GeofenceSetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::core_api::GeofenceSetRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core_api::GeofenceSetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core_api::GeofenceSetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core_api::GeofenceSetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core_api::GeofenceSetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::core_api::GeofenceSetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "405a0a71ce96270765c52ffdc0cf6f86";
  }

  static const char* value(const ::core_api::GeofenceSetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x405a0a71ce962707ULL;
  static const uint64_t static_value2 = 0x65c52ffdc0cf6f86ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_api::GeofenceSetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "core_api/GeofenceSetRequest";
  }

  static const char* value(const ::core_api::GeofenceSetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::core_api::GeofenceSetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
\n\
\n\
float64 min_alt\n\
float64 max_alt\n\
float64[] lat\n\
float64[] lng\n\
";
  }

  static const char* value(const ::core_api::GeofenceSetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::core_api::GeofenceSetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.min_alt);
      stream.next(m.max_alt);
      stream.next(m.lat);
      stream.next(m.lng);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GeofenceSetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_api::GeofenceSetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::core_api::GeofenceSetRequest_<ContainerAllocator>& v)
  {
    s << indent << "min_alt: ";
    Printer<double>::stream(s, indent + "  ", v.min_alt);
    s << indent << "max_alt: ";
    Printer<double>::stream(s, indent + "  ", v.max_alt);
    s << indent << "lat[]" << std::endl;
    for (size_t i = 0; i < v.lat.size(); ++i)
    {
      s << indent << "  lat[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lat[i]);
    }
    s << indent << "lng[]" << std::endl;
    for (size_t i = 0; i < v.lng.size(); ++i)
    {
      s << indent << "  lng[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lng[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CORE_API_MESSAGE_GEOFENCESETREQUEST_H
